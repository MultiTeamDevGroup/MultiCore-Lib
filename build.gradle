//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.17.1-0.1.1.7'
group = 'multiteam.multicorelib' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'multicore_lib'

def projectsDir = projectDir.parentFile
def projectsUrlDir = projectsDir.getPath().replaceAll("\\\\", "/")

def local_maven = "file://${projectsUrlDir}/MultiTeam-Maven"

println(local_maven)

java.toolchain.languageVersion = JavaLanguageVersion.of(16) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java : ' + System.getProperty('java.version'))
println(' JVM : ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')')
println(' Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.17.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                multicore_lib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                multicore_lib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'arcadia', '--all',
                    '--existing', file('src/main/resources/'),
                    '-existing', file('src/generated/resources'),
                    '--output', file('src/generated/resources/')

            mods {
                multicore_lib {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.71'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "multicore_lib",
            "Specification-Vendor": "multicore_lib-",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"multicore_lib-",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs un-obfuscated jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            name "LocalMavenRepo"
            url local_maven
        }
    }
}

/**
 * Add sources jar for publishing to local maven repo.
 * {...}-sources.jar
 */
task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier 'sources'
}

/**
 * Add sourcesJar as artifact.
 */
artifacts {
    archives sourcesJar
}
